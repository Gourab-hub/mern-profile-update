Client->Contact.js



import React, { useEffect, useState } from 'react'
import { useHistory } from 'react-router-dom'

const Contact = () => {

    const history = useHistory();
    const [userData, setuserData] = useState({ name: "", email: "", phone: "", message: "" })

    const userContact = async () => {
        try {

            const res = await fetch('/getdata', {
                method: "GET",
                headers: {

                    "Content-Type": "application/json"
                },

            });
            const data = await res.json();
            console.log("data", data)
            // console.log("555555555555555555555555555555555555")
            // setuserData(data)

            setuserData({ ...userData, name: data.name, email: data.email, phone: data.phone })

            if (!data.status === 200) {
                const error = new Error(res.error);
                throw error;
            }
        } catch (err) {
            console.log(err);
            history.push("/login");
        }
    }

    useEffect(() => {
        userContact();
    }, []);


    //we are storing data in
    const handelInput = (e) => {
        const name = e.target.name;
        const value = e.target.value;

        setuserData({ ...userData, [name]: value });

    }

    // send data backender

    const contactForm = async (e) => {
        e.preventDefault();

        const { name, email, phone, message } = userData;

        const res = await fetch('/contact', {
            method: 'POST',
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                name, email, phone, message
            })
        })

        const data = await res.json();
        console.log("contact data", data)

        if (!data) {
            console.log("Nothing post");
           
        }
        else {
            alert("message send")
            setuserData({ ...userData, message: "" })
        }
    }


    return (
        <>


            <div class="container ">
                <div class="row d-flex justify-content-between">
                    <div class="col-sm">
                        <div class="card">

                            <div class="card-body">
                                <h5 class="card-title"><i class="fa fa-phone" aria-hidden="true"></i> Phonet</h5>
                                <p class="card-text"><span>+91</span>{userData.phone}</p>

                            </div>
                        </div>
                    </div>
                    <div class="col-sm">
                        <div class="card">

                            <div class="card-body">
                                <h5 class="card-title"><i class="fa fa-envelope" aria-hidden="true"></i> Email</h5>
                                <p class="card-text">{userData.email}</p>

                            </div>
                        </div>
                    </div>
                    <div class="col-sm">
                        <div class="card">

                            <div class="card-body">
                                <h5 class="card-title"><i class="fa fa-address-card-o" aria-hidden="true"></i> Address</h5>
                                <p class="card-text">Coochbehar</p>

                            </div>
                        </div>
                    </div>
                </div>

            </div>


            <div className="container">
                <div className="title">Get In Touch</div>
                <div className="content p-2">

                    <form method="POST" className="justify-content-center">
                        <div className="d-flex justify-content-around input-box1">
                            <input type="text" className="m-2"
                                name="name"
                                value={userData.name}
                                onChange={handelInput}
                                placeholder="Name" required autoComplete="off" />
                            <input type="text" className="m-2"
                                name="email"
                                value={userData.email}
                                onChange={handelInput}
                                placeholder="Email" required autoComplete="off" />
                            <input type="text" className="m-2"
                                name="phone"
                                value={userData.phone}
                                onChange={handelInput}
                                placeholder="Password" required autoComplete="off" />

                        </div>
                        <div className="input-box1 d-flex justify-content-center p-2">
                            <textarea class="form-control" aria-label="With textarea"
                                name="message"
                                value={userData.message}
                                onChange={handelInput} placeholder="Message"></textarea>

                        </div>

                        <div className="button">
                            <input type="submit" className="signup"
                                onClick={contactForm} value="Login" />
                        </div>
                    </form>

                </div>
            </div>
        </>
    )
}

export default Contact




2. server->




const express = require('express');
const jwt = require('jsonwebtoken');
const router = express.Router();
const bcrypt = require('bcryptjs');

//----------------------------------

var cookieParser = require('cookie-parser')
 
var app = express()
router.use(cookieParser())
 
router.get('/', function (req, res) {
  // Cookies that have not been signed
  console.log('Cookies: ', req.cookies.jwtoken )
  res.send('Hello home from router ')
  // Cookies that have been signed
  console.log('Signed Cookies gbbbb ')
})






// ---------------------------------
const authenticate =require("../middleware/authenticate")





require('../db/conn')
const User = require("../model/userSchema")



// router.get('/', function (req, res) {
//     res.send('Hello home from router ')
//     console.log('hello about')
//   })


  // async await style
router.post('/registration', async function (req, res) {

    const {name,email,phone,work,password,cpassword} = req.body;

    // console.log(name,email,phone,work,password,cpassword)

    //  console.log(req.body.name)
    //  console.log(req.body.email)

    // res.json({message:req.body})
    if(!name || !email || !phone || !work || !password || !cpassword){
        return res.status(422).json({error: " please filled the all field properly "})
    }

    // then catch 

    try{
        const userExist = await User.findOne({email:email})

        if (userExist){
            return res.status(422).json({error: " User already Exist "});
        }

        const user = new User({name:name ,email,phone,work,password,cpassword});


        const userRegister = await user.save();

        res.status(201).json({message : " User Register successful "})
    
    }catch(err){
        console.log(err)

    }

})

/*
using promise---------------------------->>>>>>>>>>>>>>>>>>>>>>>

router.post('/registration',  function (req, res) {

    const {name,email,phone,work,password,cpassword} = req.body;

    // console.log(name,email,phone,work,password,cpassword)

    // console.log(req.body.name)
    // console.log(req.body.email)

    // res.json({message:req.body})
    if(!name || !email || !phone || !work || !password || !cpassword){
        return res.status(422).json({error: " please filled the all field properly "})
    }

    then catch 

    User.findOne({email:email})
    .then((userExist)=>{
        if (userExist){
            return res.status(422).json({error: " User already Exist "});
        }
     
        // const user = new User(req.body)  etate sob kichu ak sathe dukbe

        //nicher tate sob kichu fillup na korle o hobe
        const user = new User({name:name ,email,phone,work,password,cpassword});

        user.save().then(()=>{
            res.status(201).json({error: " User Register successful "})
        }).catch((err)=> res.status(500).json({error: " Failed Register "}))

    }).catch(err => {console.log(err)})

})

// {
//     "name":"Gourab",
//     "email":"a@gmail.com",
//     "phone":1234567891,
//     "work":"web dev",
//     "password":"password",
//     "cpassword":"password"

// }
*/

// login route

router.post('/login', async (req, res) =>{

    // console.log(req.body)
    // res.json({message : "hello login"})

    try{

        let token;
        const {email,password} = req.body;
        if(!email || !password ){
            return res.status(422).json({error: " please filled the all field properly "})
        }

        const userlogin = await User.findOne({email:email});

        // console.log(userlogin)-> ans
        // {
        //     _id: 60ad3d1d4e85310d5c9ef3b4,
        //     name: 'Gourab',
        //     email: 'a@gmail.com',
        //     phone: 1234567891,
        //     work: 'web dev',
        //     password: 'password',
        //     cpassword: 'password',
        //     __v: 0
        //   }
        

        

        if(userlogin){

            const isMatch = await bcrypt.compare(password,userlogin.password)
            
            token = await userlogin.generateAuthToken()// token generate


            console.log("login generate token--------->",token)
            //cookie expiry date manage
            res.cookie('jwtoken',token,{
                expires: new Date(Date.now() + 25892000000),
                httpOnly:true 
            });


            if(isMatch){
                res.status(201).json({message: " User login Successfully "})
                console.log("okk")
            }else{
                res.status(401).json({ error : " User error "});
                console.log("error")
            }

        }else{
            res.status(201).json({message: " Invalid Candidate "})
        }

        

        // postman
        // {
        //     "email":"a@gmail.com",
        //     "password":"password"
        // }

    }catch(err){
        console.log(err)
    }
})



router.get('/about', authenticate ,async (req, res) =>{
    
    console.log('hello about');
    res.send(req.rootUser);
});


//get User data for Home and contact page
router.get('/getdata', authenticate ,async (req, res) =>{
    
    console.log('hello about');
    res.send(req.rootUser);
});


*******************************************************************************

router.post('/contact', authenticate, async (req, res) => {
    try {
       
        const { name, email, phone, message } = req.body;
        // console.log("req data",req.body.message,req.body.name,req.body.email);
        if (!name || !email || !phone || !message) {

            // console.log("Please fill the contact form");
            return res.json({errors:"Please fill the contact form"})
            
        }
        const userContact = await User.findOne({_id:req.UserID});
        // console.log("2st part contact userContact",userContact);
        if(userContact){

            // console.log("Message send successfully from auth.js");
            const userMessage = await userContact.addMessage(name, email, phone, message);
            await userContact.save();
            res.status(201).json({message:"Message send successfully from auth.js "})
        }
    } catch (err) {
        console.log(err)
    }

});
************************************************************************

module.exports = router;




3.server->userSchema







const mongoose = require('mongoose');

const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const userSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true
    },

    email: {
        type: String,
        required: true,
        unique: true
    },
    phone: {
        type: Number,
        required: true
    },
    work: {
        type: String,
        required: true
    },
    password: {
        type: String,
        required: true
    },
    cpassword: {
        type: String,
        required: true
    },
    date:{
        type: Date,
        default: Date.now
    },
  messages:[{
    name: {
        type: String,
        required: true
    },

    email: {
        type: String,
        required: true
    },
    phone: {
        type: Number,
        required: true
    },
    message: {
        type: String,
        required: true
    },
  }],

    tokens:[
        {
            token:{
                type: String,
                required: true
            }
        }
    ] 


})



userSchema.pre('save', async function(next){
 
    if(this.isModified('password')){
        console.log("Password-hash");
        this.password  = await bcrypt.hash(this.password ,12);
        this.cpassword = await bcrypt.hash(this.cpassword ,12);
    }
    next();

} )

// we are generate token
userSchema.methods.generateAuthToken = async function(){
    try{
        let token = jwt.sign({_id:this._id},process.env.SECRET_KEY)
        this.tokens= this.tokens.concat({token:token}); // porer token ta uporer tar sathe match hobe
        await this.save();
        return token;

    }catch(err){
        console.error(err)
    }
}



//store the message
userSchema.methods.addMessage = async function(name, email, phone, message){
    try{
      this.messages =  this.messages.concat({name, email, phone, message})
      await this.save();
    //   console.log("success message send usershema")
      return this.messages;
      
    }catch(err){
        console.error(err)
    }
}


const User = mongoose.model('USER',userSchema)
module.exports = User;